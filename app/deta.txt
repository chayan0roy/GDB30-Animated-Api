/////////////////////////////////////////Clockwise


import React, { useRef } from 'react';
import { Animated, View, Button, StyleSheet, Easing } from 'react-native';

const App = () => {
  const spinValue = useRef(new Animated.Value(0)).current;

  const startSpinAnimation = () => {
    spinValue.setValue(0);

    Animated.timing(spinValue, {
      toValue: 1,
      duration: 1000, 
      easing: Easing.linear, 
      useNativeDriver: true, 
    }).start();
  };

  const spin = spinValue.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '360deg'],
  });

  return (
    <View style={styles.container}>
      <Animated.View style={[styles.box, { transform: [{ rotate: spin }] }]} />
      <Button title="Rotate" onPress={startSpinAnimation} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  box: {
    width: 100,
    height: 100,
    backgroundColor: 'green',
  },
});

export default App;














/////////////////////////////////////////Background Color Change

import React, { useRef } from 'react';
import { Animated, View, StyleSheet, Button } from 'react-native';

const BackgroundColorChangeAnimation = () => {
  const colorValue = useRef(new Animated.Value(0)).current;

  const startColorAnimation = () => {
    Animated.timing(colorValue, {
      toValue: 1,
      duration: 1000, 
      useNativeDriver: false, 
    }).start(() => {
      colorValue.setValue(0);
    });
  };


  const backgroundColor = colorValue.interpolate({
    inputRange: [0, 0.5, 1],
    outputRange: ['#FF5733', '#33FF57', '#3357FF'],
  });

  return (
    <View style={styles.container}>

      <Animated.View style={[styles.colorBox, { backgroundColor }]} />

      <Button title="Change Background Color" onPress={startColorAnimation} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  colorBox: {
    width: 200,
    height: 200,
    borderRadius: 10,
    marginBottom: 20,
  },
});

export default BackgroundColorChangeAnimation;






















/////////////////////////////////////////Text Typing Animation

import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet } from 'react-native';

const TypingEffectAnimation = () => {
  const [displayText, setDisplayText] = useState('');
  const fullText = 'Welcome to My App';
  const typingSpeed = 100;

  useEffect(() => {
    let currentIndex = 0;

    const typingInterval = setInterval(() => {
      if (currentIndex < fullText.length) {
        setDisplayText((prevText) => prevText + fullText[currentIndex]);
        currentIndex++;
      } else {
        clearInterval(typingInterval);
      }
    }, typingSpeed);

    return () => clearInterval(typingInterval);
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>{displayText}</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f0f0f0',
  },
  text: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
  },
});

export default TypingEffectAnimation;




















/////////////////////////////////////////Elastic Bounce Animation


import React, { useRef } from 'react';
import { Animated, View, StyleSheet, Button, Easing } from 'react-native';

const ElasticBounceAnimation = () => {
  const bounceValue = useRef(new Animated.Value(0)).current;

  const startBounceAnimation = () => {

    Animated.sequence([

      Animated.timing(bounceValue, {
        toValue: -50,
        duration: 200,
        easing: Easing.linear,
        useNativeDriver: true,
      }),

      Animated.spring(bounceValue, {
        toValue: 0,
        friction: 4,
        tension: 40,
        useNativeDriver: true,
      }),
    ]).start();
  };

  return (
    <View style={styles.container}>

      <Animated.View style={{ transform: [{ translateY: bounceValue }] }}>
        <Button title="Press Me" onPress={startBounceAnimation} />
      </Animated.View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default ElasticBounceAnimation;















///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////









////////////////////////////////////////////////////Staggered Animation

import React, { useRef, useEffect } from 'react';
import { Animated, View, StyleSheet } from 'react-native';

const StaggeredAnimation = () => {
  const animationValues = useRef([1, 2, 3, 4, 5].map(() => new Animated.Value(0))).current;

  useEffect(() => {
    Animated.stagger(
      200,
      animationValues.map((value) =>
        Animated.timing(value, {
          toValue: 1,
          duration: 500, 
          useNativeDriver: true, 
        })
      )
    ).start();
  }, []);

  return (
    <View style={styles.container}>
      {animationValues.map((animatedValue, index) => (
        <Animated.View
          key={index}
          style={[
            styles.box,
            {
              opacity: animatedValue, 
              transform: [
                {
                  translateY: animatedValue.interpolate({
                    inputRange: [0, 1],
                    outputRange: [50, 0],
                  }),
                },
              ],
            },
          ]}
        />
      ))}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  box: {
    width: '90%',
    height: 100,
    backgroundColor: '#007bff',
    marginVertical: 10,
    borderRadius: 10,
  },
});

export default StaggeredAnimation;















/////////////////////////////////////////Sequence Animation

import React, { useRef, useEffect } from 'react';
import { Animated, View, StyleSheet } from 'react-native';

const SequenceAnimation = () => {
  const translateY = useRef(new Animated.Value(0)).current;
  const translateX = useRef(new Animated.Value(0)).current;
  const opacity = useRef(new Animated.Value(1)).current;

  useEffect(() => {
    Animated.sequence([
      Animated.timing(translateY, {
        toValue: -100,
        duration: 500,
        useNativeDriver: true,
      }),
       Animated.timing(translateX, {
        toValue: -100,
        duration: 500,
        useNativeDriver: true,
      }),
       Animated.timing(opacity, {
        toValue: 0,
        duration: 500,
        useNativeDriver: true,
      }),
    ]).start();
  }, []);

  return (
    <View style={styles.container}>
      <Animated.View
        style={[
          styles.box,
          {
            transform: [
              { translateY: translateY },
              { translateX: translateX },
            ],
            opacity: opacity,
          },
        ]}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  box: {
    width: 100,
    height: 100,
    backgroundColor: '#007bff',
    borderRadius: 10,
  },
});

export default SequenceAnimation;











/////////////////////////////////////////Swipe To Dismiss Animation


import React, { useRef } from 'react';
import { Animated, View, StyleSheet, PanResponder, Text } from 'react-native';

const SwipeToDismissAnimation = () => {
  const pan = useRef(new Animated.ValueXY()).current;

  const panResponder = useRef(
    PanResponder.create({
      onMoveShouldSetPanResponder: () => true,
      onPanResponderMove: Animated.event([null, { dx: pan.x }], {
        useNativeDriver: false,
      }),
      onPanResponderRelease: (_, gestureState) => {
        if (Math.abs(gestureState.dx) > 150) {
          Animated.timing(pan, {
            toValue: { x: gestureState.dx > 0 ? 500 : -500, y: 0 },
            duration: 200,
            useNativeDriver: true,
          }).start();
        } else {
          Animated.spring(pan, {
            toValue: { x: 0, y: 0 },
            useNativeDriver: true,
          }).start();
        }
      },
    })
  ).current;

  return (
    <View style={styles.container}>
      <Animated.View
        style={[
          styles.box,
          {
            transform: [{ translateX: pan.x }],
          },
        ]}
        {...panResponder.panHandlers}
      >
        <Text style={styles.text}>Swipe Me</Text>
      </Animated.View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  box: {
    width: 200,
    height: 100,
    backgroundColor: '#007bff',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 10,
  },
  text: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
});

export default SwipeToDismissAnimation;
